substitutions:
  friendly_name: "keypad2"

esphome:
  name: keypad2
  platform: ESP8266
  board: d1_mini

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendly_name} Hotspot"
    password: !secret failback_password

captive_portal:

mqtt:
  broker: 172.22.22.13
  discovery: True
  discovery_retain: True
  keepalive: 10s

# Enable logging
logger:
  #  level: DEBUG

# Enable Home Assistant API
api:
  password: !secret ota_password

wiegand:
  - id: keypad
    d0: GPIO5
    d1: GPIO4
    on_key:
      - lambda: ESP_LOGI("KEY", "received key %d", x);
    on_tag:
      - lambda: ESP_LOGI("TAG", "received tag %s", x.c_str());
      - mqtt.publish_json:
          topic: "keypad/tag"
          payload: |-
            root["tag"] = x.c_str();

    on_raw:
      - lambda: ESP_LOGI("RAW", "received raw %d bits, value %llx", bits, value);

key_collector:
  - id: pincode_reader
    source_id: keypad
    min_length: 4
    max_length: 8
    end_keys: "#"
    end_key_required: true
      #    back_keys: "*"
    clear_keys: "*"
    allowed_keys: "0123456789"
    timeout: 5s
    on_progress:
      - logger.log:
          format: "input progress: '%s', started by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)" ]
    on_result:
      - logger.log:
          format: "input result: '%s', started by '%c', ended by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)", "(end == 0 ? '~' : end)" ]
      - mqtt.publish_json:
          topic: "keypad/code"
          payload: |-
            root["code"] = x.c_str();
    on_timeout:
      - logger.log:
          format: "input timeout: '%s', started by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)" ]


ota:
  password: !secret ota_password

sensor:
 - platform: wifi_signal
   name: “esp32_1 WiFi Signal Sensor”
   #   update_interval: s
# - platform: adc
#   pin: A0
#   attenuation: 11db
#   name: batery
   
