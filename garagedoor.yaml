esphome:
  name: garage
  platform: ESP8266
  board: nodemcuv2

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Garage Fallback Hotspot"
    password: !secret failback_password
captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret ota_password
ota:
  password: !secret ota_password

globals:
  - id: performing_last_movement
    type: boolean
    restore_value: no
    initial_value: 'false'

switch:
  # The switch that turns the UP direction on
  - platform: gpio
    pin: D1
    id: garage_switch
    # If ESP reboots, do not attempt to restore switch state
    restore_mode: always off

binary_sensor:
  - platform: gpio
    pin:
      number: D5
      mode: INPUT_PULLUP
      inverted: true
    name: "Garage Closed Reed Switch"
    id: closed_endstop
    filters:
      - delayed_on: 1000ms #Wait to stop moving
      - delayed_off: 1000ms #Wait to start movin
      - invert:

cover:
  - platform: template
    name: "Garage Door"
    id: garage_door
    device_class: garage
    assumed_state: true
    lambda: !lambda |-
      if (id(closed_endstop).state) //Door just hit closed endstop
      {  
         //No operation in progress, just send state
         id(performing_last_movement) = false;
         id(garage_door).current_operation =  esphome::cover::COVER_OPERATION_IDLE;
         return COVER_CLOSED;
      }
      else
      {
          return COVER_OPEN;
      }
    open_action: 
      - lambda: !lambda |-
          id(garage_door).current_operation =  esphome::cover::COVER_OPERATION_OPENING;
          if (id(closed_endstop).state) {
            ESP_LOGE("custom", "should be opening the door");
            id(garage_switch).turn_on();
            delay(500);
            id(garage_switch).turn_off();
            if (!id(closed_endstop).state) {
              id(performing_last_movement) = true; //Set flag to indicate we know where the door is
            }
            delay(12000);
            id(performing_last_movement) = false;
            id(garage_door).current_operation =  esphome::cover::COVER_OPERATION_IDLE;
          }
    close_action:
      - lambda: !lambda |-
          id(garage_door).current_operation =  esphome::cover::COVER_OPERATION_CLOSING;
          if (!id(closed_endstop).state) {
            id(garage_switch).turn_on();
            delay(500);
            id(garage_switch).turn_off();
            if (!id(closed_endstop).state) {
              id(performing_last_movement) = true; //Set flag to indicate we know where the door is
            }
          }
    stop_action:
      - lambda: !lambda |-
          if(id(garage_door).current_operation ==  esphome::cover::COVER_OPERATION_CLOSING || id(garage_door).current_operation ==  esphome::cover::COVER_OPERATION_OPENING )
          {
            id(garage_door).current_operation =  esphome::cover::COVER_OPERATION_IDLE;
            //Stop the door if it is moving
            id(performing_last_movement) = false;
            id(garage_switch).turn_on();
            delay(500);
            id(garage_switch).turn_off();
          }
